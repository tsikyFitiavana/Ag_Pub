{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"http://localhost:5000/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"http://localhost:5000/api/users/login\", userData).then(function (res) {\n      console.log(res); // Save to localStorage\n      // Set token to localStorage\n\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(res.data);\n      localStorage.setItem('idE', res.data.idE);\n      localStorage.setItem(\"id\", res.data.id);\n      var ex = localStorage.getItem('idE');\n      console.log('getItem idE ' + res.data.idE);\n      console.log('getItem id ' + res.data.id); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/home/dev/Bureau/Ag_Pub/agFront/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","console","log","token","localStorage","setItem","idE","id","ex","getItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DT,IAAAA,KAAK,CACFU,IADH,CACQ,0CADR,EACoDH,QADpD,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CT,IAAAA,KAAK,CACFU,IADH,CACQ,uCADR,EACiDH,QADjD,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACXS,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ,EADW,CAGX;AAEA;;AALW,UAMHW,KANG,GAMOX,GAAG,CAACO,IANX,CAMHI,KANG;AAOXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACO,IAAhB;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4Bb,GAAG,CAACO,IAAJ,CAASO,GAArC;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,IAArB,EAA2Bb,GAAG,CAACO,IAAJ,CAASQ,EAApC;AACA,UAAMC,EAAE,GAAGJ,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAX;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAgBV,GAAG,CAACO,IAAJ,CAASO,GAArC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeV,GAAG,CAACO,IAAJ,CAASQ,EAApC,EAbW,CAcX;;AACA1B,MAAAA,YAAY,CAACsB,KAAD,CAAZ,CAfW,CAgBX;;AACA,UAAMO,OAAO,GAAG5B,UAAU,CAACqB,KAAD,CAA1B,CAjBW,CAkBX;;AACAd,MAAAA,QAAQ,CAACsB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAtBH,EAuBGhB,KAvBH,CAuBS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAvBZ;AA6BD,GA9BgC;AAAA,CAA1B,C,CAgCP;;AACA,OAAO,IAAMY,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLd,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEa;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLhB,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAM4B,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAxB,QAAQ,EAAI;AAC1C;AACAe,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAjC,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,IAAAA,QAAQ,CAACsB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"http://localhost:5000/api/users/login\", userData)\n    .then(res => {\n      console.log(res);\n      \n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      console.log(res.data);\n      localStorage.setItem('idE', res.data.idE)\n      localStorage.setItem(\"id\", res.data.id);\n      const ex = localStorage.getItem('idE');\n      console.log('getItem idE '+ res.data.idE);\n      console.log('getItem id '+ res.data.id);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}